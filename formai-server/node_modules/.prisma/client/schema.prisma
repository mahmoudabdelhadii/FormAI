generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int     @id @default(autoincrement())
  username String? @db.VarChar
  password String? @db.VarChar
}

model AdminToken {
  id          Int     @id @default(autoincrement())
  user        String? @db.VarChar
  accessToken String? @db.VarChar
}

model BannedUsers {
  id        Int       @id @default(autoincrement())
  community Int
  user      String    @db.VarChar
  Community Community @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User      User      @relation(fields: [user], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model Comment {
  id   Int     @id @default(autoincrement())
  body String? @db.VarChar
  user String? @db.VarChar
  post Int?
  Post Post?   @relation(fields: [post], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Community {
  id               Int                @id @default(autoincrement())
  name             String?            @db.VarChar
  description      String?            @db.VarChar
  BannedUsers      BannedUsers[]
  CommunityRequest CommunityRequest[]
  Leaderboard      Leaderboard[]
  LeaderboardEntry LeaderboardEntry[]
  PendingPost      PendingPost[]
  Post             Post[]
  Report           Report[]
}

model CommunityRequest {
  id          Int        @id @default(autoincrement())
  user        String?    @db.VarChar
  community   Int?
  isVerified  Boolean?
  isRequested Boolean?
  Community   Community? @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User        User?      @relation(fields: [user], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model Context {
  id         Int      @id @default(autoincrement())
  user       String?  @db.VarChar
  email      String?  @db.VarChar
  ip         String?  @db.VarChar
  country    String?  @db.VarChar
  city       String?  @db.VarChar
  browser    String?  @db.VarChar
  platform   String?  @db.VarChar
  os         String?  @db.VarChar
  device     String?  @db.VarChar
  deviceType String?  @db.VarChar
  isTrusted  Boolean?
  User       User?    @relation(fields: [user], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model Leaderboard {
  id        Int       @id @default(autoincrement())
  community Int
  tracking  String?   @db.VarChar
  Community Community @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model LeaderboardEntry {
  id         Int        @id @default(autoincrement())
  user       String?    @db.VarChar
  community  Int?
  entryUrl   String?    @db.VarChar
  verifiedBy Int?
  isVerified Boolean?
  rank       Int?
  Community  Community? @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User       User?      @relation(fields: [user], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model Like {
  id   Int     @id @default(autoincrement())
  user String? @db.VarChar
  post Int?
}

model Log {
  id        Int       @id @default(autoincrement())
  email     String?   @db.VarChar
  context   String?   @db.VarChar
  message   String?   @db.VarChar
  type      String?   @db.VarChar
  level     String?   @db.VarChar
  timestamp DateTime? @db.Timestamp(6)
}

model PendingPost {
  id                Int        @id @default(autoincrement())
  Content           String?    @db.VarChar
  fileUrl           String?    @db.VarChar
  community         Int?
  user              String?    @db.VarChar
  caption           String?    @db.VarChar
  status            String?    @db.VarChar
  confirmationToken String?    @db.VarChar
  Community         Community? @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User              User?      @relation(fields: [user], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model Post {
  id        Int        @id @default(autoincrement())
  Content   String?    @db.VarChar
  fileUrl   String?    @db.VarChar
  community Int?
  user      String?    @db.VarChar
  caption   String?    @db.VarChar
  Comment   Comment[]
  Community Community? @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User      User?      @relation(fields: [user], references: [username], onDelete: NoAction, onUpdate: NoAction)
  Report    Report[]
}

model Preferences {
  id   Int     @id @default(autoincrement())
  user String? @db.VarChar
  User User?   @relation(fields: [user], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model Relationship {
  id                                Int     @id @default(autoincrement())
  follower                          String? @db.VarChar
  following                         String? @db.VarChar
  User_Relationship_followerToUser  User?   @relation("Relationship_followerToUser", fields: [follower], references: [username], onDelete: NoAction, onUpdate: NoAction)
  User_Relationship_followingToUser User?   @relation("Relationship_followingToUser", fields: [following], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model Report {
  id           Int        @id @default(autoincrement())
  reportedBy   String?    @db.VarChar
  post         Int?
  community    Int?
  reportReason String?    @db.VarChar
  reportDate   DateTime?  @db.Timestamp(6)
  Community    Community? @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Post         Post?      @relation(fields: [post], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User         User?      @relation(fields: [reportedBy], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model Token {
  id           Int       @id @default(autoincrement())
  user         String?   @db.VarChar
  refreshToken String?   @db.VarChar
  accessToken  String?   @db.VarChar
  createdAt    DateTime? @db.Timestamp(6)
  User         User?     @relation(fields: [user], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  username                                  String             @id @db.VarChar
  firstName                                 String?            @db.VarChar
  lastName                                  String?            @db.VarChar
  email                                     String?            @db.VarChar
  password                                  String?            @db.VarChar
  avatarUrl                                 String?            @db.VarChar
  bio                                       String?            @db.VarChar
  role                                      String?            @db.VarChar
  createdAt                                 DateTime?          @db.Timestamp(6)
  isEmailVerified                           Boolean?
  height                                    Float?
  weight                                    Float?
  BannedUsers                               BannedUsers[]
  CommunityRequest                          CommunityRequest[]
  Context                                   Context[]
  LeaderboardEntry                          LeaderboardEntry[]
  PendingPost                               PendingPost[]
  Post                                      Post[]
  Preferences                               Preferences[]
  Relationship_Relationship_followerToUser  Relationship[]     @relation("Relationship_followerToUser")
  Relationship_Relationship_followingToUser Relationship[]     @relation("Relationship_followingToUser")
  Report                                    Report[]
  Token                                     Token[]
}
