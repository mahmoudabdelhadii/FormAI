CREATE TABLE "Relationship" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "follower" varchar NOT NULL,
  "following" varchar NOT NULL
);

CREATE TABLE "User" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
  "username" varchar UNIQUE PRIMARY KEY,
  "firstName" varchar NOT NULL,
  "lastName" varchar NOT NULL,
  "email" varchar NOT NULL,
  "password" varchar NOT NULL,
  "avatarUrl" varchar,
  "bio" varchar,
  "role" integer,
  "createdAt" timestamp DEFAULT (now()),
  "isEmailVerified" bool DEFAULT false,
  "height" float,
  "weight" float,
  "age" integer
);

CREATE TABLE "UserRoles" (
  "id" integer PRIMARY KEY,
  "role" varchar
);

CREATE TABLE "Token" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user" varchar NOT NULL,
  "refreshToken" varchar,
  "accessToken" varchar,
  "createdAt" timestamp DEFAULT (now())
);

CREATE TABLE "Post" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Content" varchar,
  "fileUrl" varchar NOT NULL,
  "community" integer NOT NULL,
  "user" varchar NOT NULL,
  "caption" varchar
);

CREATE TABLE "Comment" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "body" varchar,
  "user" varchar NOT NULL,
  "post" integer NOT NULL
);

CREATE TABLE "PendingPost" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Content" varchar,
  "fileUrl" varchar NOT NULL,
  "community" integer NOT NULL,
  "user" varchar NOT NULL,
  "caption" varchar,
  "status" integer,
  "confirmationToken" varchar
);

CREATE TABLE "PendingPostStatus" (
  "id" integer PRIMARY KEY,
  "status" varchar
);

CREATE TABLE "Admin" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "username" varchar,
  "password" varchar
);

CREATE TABLE "AdminToken" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user" varchar NOT NULL,
  "accessToken" varchar
);

CREATE TABLE "Community" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar,
  "description" varchar
);

CREATE TABLE "CommunityRequest" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user" varchar,
  "community" integer,
  "verifiedAt" timestamp,
  "requestedAt" timestamp DEFAULT (now())
);

CREATE TABLE "Log" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "email" varchar,
  "context" varchar,
  "message" varchar,
  "type" varchar,
  "level" varchar,
  "timestamp" timestamp DEFAULT (now())
);

CREATE TABLE "Context" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user" varchar,
  "email" varchar,
  "ip" varchar,
  "country" varchar,
  "city" varchar,
  "browser" varchar,
  "platform" varchar,
  "os" varchar,
  "device" varchar,
  "deviceType" varchar,
  "isTrusted" bool
);

CREATE TABLE "Report" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "reportedBy" varchar NOT NULL,
  "post" integer NOT NULL,
  "community" integer NOT NULL,
  "reportReason" varchar,
  "reportDate" timestamp DEFAULT (now())
);

CREATE TABLE "Preferences" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user" varchar,
  "enableContextBasedAuth" bool
);

CREATE TABLE "BannedUsers" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "community" integer NOT NULL,
  "user" varchar NOT NULL
);

CREATE TABLE "Leaderboard" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "community" integer NOT NULL
);

CREATE TABLE "LeaderboardSubmission" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user" varchar,
  "community" integer,
  "entryUrl" varchar,
  "verifiedBy" integer,
  "weight" varchar,
  "type" integer,
  "verifiedAt" timestamp DEFAULT (now()),
  "rank" int
);

CREATE TABLE "LeaderboardSubmissionType" (
  "id" integer PRIMARY KEY,
  "type" varchar
);

CREATE TABLE "Like" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user" varchar NOT NULL,
  "post" integer NOT NULL
);

ALTER TABLE "CommunityRequest" ADD FOREIGN KEY ("user") REFERENCES "User" ("username");

ALTER TABLE "CommunityRequest" ADD FOREIGN KEY ("community") REFERENCES "Community" ("id");

ALTER TABLE "Log" ADD FOREIGN KEY ("context") REFERENCES "Context" ("user");

ALTER TABLE "Preferences" ADD FOREIGN KEY ("user") REFERENCES "User" ("username");

ALTER TABLE "BannedUsers" ADD FOREIGN KEY ("community") REFERENCES "Community" ("id");

ALTER TABLE "BannedUsers" ADD FOREIGN KEY ("user") REFERENCES "User" ("username");

ALTER TABLE "Leaderboard" ADD FOREIGN KEY ("community") REFERENCES "Community" ("id");

ALTER TABLE "LeaderboardSubmission" ADD FOREIGN KEY ("user") REFERENCES "User" ("username");

ALTER TABLE "LeaderboardSubmission" ADD FOREIGN KEY ("community") REFERENCES "Community" ("id");

ALTER TABLE "LeaderboardSubmission" ADD FOREIGN KEY ("type") REFERENCES "LeaderboardSubmissionType" ("id");

ALTER TABLE "Like" ADD FOREIGN KEY ("user") REFERENCES "User" ("username");

ALTER TABLE "Like" ADD FOREIGN KEY ("post") REFERENCES "Post" ("id");

ALTER TABLE "Post" ADD FOREIGN KEY ("user") REFERENCES "User" ("username");

ALTER TABLE "User" ADD FOREIGN KEY ("username") REFERENCES "Context" ("user");

ALTER TABLE "Report" ADD FOREIGN KEY ("reportedBy") REFERENCES "User" ("username");

ALTER TABLE "Report" ADD FOREIGN KEY ("community") REFERENCES "Community" ("id");

ALTER TABLE "Report" ADD FOREIGN KEY ("post") REFERENCES "Post" ("id");

ALTER TABLE "Relationship" ADD FOREIGN KEY ("following") REFERENCES "User" ("username");

ALTER TABLE "Relationship" ADD FOREIGN KEY ("follower") REFERENCES "User" ("username");

ALTER TABLE "Comment" ADD FOREIGN KEY ("post") REFERENCES "Post" ("id");

ALTER TABLE "Comment" ADD FOREIGN KEY ("user") REFERENCES "User" ("username");

ALTER TABLE "Post" ADD FOREIGN KEY ("community") REFERENCES "Community" ("id");

ALTER TABLE "PendingPost" ADD FOREIGN KEY ("user") REFERENCES "User" ("username");

ALTER TABLE "PendingPost" ADD FOREIGN KEY ("community") REFERENCES "Community" ("id");

ALTER TABLE "Token" ADD FOREIGN KEY ("user") REFERENCES "User" ("username");
