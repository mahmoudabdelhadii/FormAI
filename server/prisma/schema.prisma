generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  output   = "../src/generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int          @id @default(autoincrement())
  username   String?      @unique @db.VarChar
  password   String?      @db.VarChar
  AdminToken AdminToken?
}

model AdminToken {
  id          Int     @id @default(autoincrement())
  user        String  @db.VarChar @unique
  accessToken String? @db.VarChar
  Admin       Admin?  @relation(fields: [user], references: [username])
}

model BannedUsers {
  id        Int        @id @default(autoincrement())
  community Int
  user      String     @db.VarChar
  reasonId  Int?
  Community Community? @relation(fields: [community], onDelete: NoAction, onUpdate: NoAction, references: [id])
}

model Comment {
  id   Int     @id @default(autoincrement())
  body String? @db.VarChar
  user String  @db.VarChar
  post Int
  Post Post?   @relation(fields: [post], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Community {
  id               Int                @id @default(autoincrement())
  name             String?            @db.VarChar
  description      String?            @db.VarChar
  CommunityUser    CommunityUser[]
  CommunityRequest CommunityRequest[]
  BannedUsers      BannedUsers[]
}

model CommunityRequest {
  id          Int        @id @default(autoincrement())
  user        String?    @db.VarChar
  community   Int?
  requestedAt DateTime?  @default(now()) @db.Timestamp(6)
  message     String?    @db.VarChar
  Community   Community? @relation(fields: [community], onDelete: NoAction, onUpdate: NoAction, references: [id])
}

model Context {
  id         Int      @id @default(autoincrement())
  user       String?  @db.VarChar
  ip         String?  @db.VarChar
  country    String?  @db.VarChar
  city       String?  @db.VarChar
  os         String?  @db.VarChar
  device     String?  @db.VarChar
  deviceType String?  @db.VarChar
  isTrusted  Boolean?
}

model Like {
  id   Int    @id @default(autoincrement())
  user String @db.VarChar
  post Int
  Post Post?  @relation(fields: [post], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Log {
  id        Int       @id @default(autoincrement())
  user      String?   @db.VarChar
  context   Int?
  message   String?   @db.VarChar
  type      Int?
  level     Int?
  timestamp DateTime? @default(now()) @db.Timestamp(6)
  LogLevel  LogLevel? @relation(fields: [level], references: [id], onDelete: NoAction, onUpdate: NoAction)
  LogType   LogType?  @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PendingPost {
  id                Int                 @id @default(autoincrement())
  Content           String?             @db.VarChar
  fileUrl           String              @db.VarChar
  community         Int
  user              String              @db.VarChar
  caption           String?             @db.VarChar
  status            Int?
  confirmationToken String?             @db.VarChar
  PendingPostStatus PendingPostStatus[]
}

model Post {
  id        Int       @id @default(autoincrement())
  Content   String?   @db.VarChar
  fileUrl   String    @db.VarChar
  community Int
  user      String    @db.VarChar
  caption   String?   @db.VarChar
  Comment   Comment[]
  Like      Like[]
}

model Preferences {
  id                     Int      @id @default(autoincrement())
  user                   String?  @db.VarChar
  enableContextBasedAuth Boolean?
}

model Relationship {
  id        Int    @id @default(autoincrement())
  follower  String @db.VarChar
  following String @db.VarChar
}

model Report {
  id           Int       @id @default(autoincrement())
  reportedBy   String    @db.VarChar
  post         Int
  community    Int
  reportReason String?   @db.VarChar
  reportDate   DateTime? @default(now()) @db.Timestamp(6)
}

model Token {
  id           Int       @id @default(autoincrement())
  user         String    @db.VarChar
  refreshToken String?   @db.VarChar
  accessToken  String?   @db.VarChar
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  User         User?     @relation(fields: [user], references: [username])
}

model User {
  id              Int             @default(autoincrement())
  username        String          @id @db.VarChar
  firstName       String          @db.VarChar
  lastName        String          @db.VarChar
  email           String          @db.VarChar
  password        String          @db.VarChar
  avatarUrl       String?         @db.VarChar
  bio             String?         @db.VarChar
  createdAt       DateTime?       @default(now()) @db.Timestamp(6)
  isEmailVerified Boolean?        @default(false)
  height          Float?
  weight          Float?
  age             Int?
  CommunityUser   CommunityUser[]
  Token           Token[]
  
}

model UserRoles {
  id   Int     @id
  role String? @unique @db.VarChar
  CommunityUser CommunityUser[]
}

model Email {
  id               Int       @id @default(autoincrement())
  email            String?   @db.VarChar
  verificationCode String?   @db.VarChar
  messageId        String?   @db.VarChar
  for              Int?
  createdAt        DateTime? @default(now()) @db.Timestamp(6)
  EmailFor         EmailFor? @relation(fields: [for], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model EmailFor {
  id    Int     @id
  for   String? @db.VarChar
  Email Email[]
}

model Leaderboard {
  id                    Int                     @id @default(autoincrement())
  community             Int
  LeaderboardSubmission LeaderboardSubmission[]
}

model LeaderboardSubmission {
  id                        Int                         @id @default(autoincrement())
  user                      String?                     @db.VarChar
  community                 Int?
  entryUrl                  String?                     @db.VarChar
  verifiedBy                Int?
  weight                    String?                     @db.VarChar
  type                      Int?
  verifiedAt                DateTime?                   @default(now()) @db.Timestamp(6)
  rank                      Int?
  LeaderboardSubmissionType LeaderboardSubmissionType[]
  Leaderboard               Leaderboard?                @relation(fields: [leaderboardId], references: [id])
  leaderboardId             Int?
}

model LeaderboardSubmissionType {
  id                      Int                    @id
  type                    String?                @db.VarChar
  LeaderboardSubmission   LeaderboardSubmission? @relation(fields: [leaderboardSubmissionId], references: [id])
  leaderboardSubmissionId Int?
}

model PendingPostStatus {
  id          Int           @id
  status      String?       @db.VarChar
  PendingPost PendingPost[]
}

model LogLevel {
  id    Int     @id
  level String? @db.VarChar
  Log   Log[]
}

model LogType {
  id   Int     @id
  type String? @db.VarChar
  Log  Log[]
}

model SuspiciousLogin {
  id                 Int      @id @default(autoincrement())
  user               String?  @db.VarChar
  ip                 String?  @db.VarChar
  country            String?  @db.VarChar
  city               String?  @db.VarChar
  os                 String?  @db.VarChar
  device             String?  @db.VarChar
  deviceType         String?  @db.VarChar
  isTrusted          Boolean?
  unverifiedAttempts Int?
  isBlocked          Boolean?
}

model CommunityUser {
  id         Int       @id @default(autoincrement())
  community  Int
  user       String    @db.VarChar
  role       Int
  verifiedAt DateTime? @default(now()) @db.Timestamp(6)
  Community  Community @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UserRoles  UserRoles @relation(fields: [role], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User       User      @relation(fields: [user], references: [username], onDelete: NoAction, onUpdate: NoAction)
}
