name: CI/CD with terraform
on:
  push:
    branches:
    - main
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{secrets.AWS_BUCKET_NAME}}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: us-east-1
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}

  

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip}}
    steps: 
    - name: checkout
      uses: actions/checkout@v4
    - name: setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
    - name: Terraform init
      id: init
      run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=us-east-1"
      working-directory: ./terraform

    - name: Terraform Validate
      id: validate
      uses: hashicorp/terraform-github-actions/validate@v0.3.7
    - name: Terraform plan
      id: plan
      run: |-
        terraform plan \
        -var="region=us-east-1" \
        -var="public_key=$PUBLIC_SSH_KEY" \
        -var="private_key=$PRIVATE_SSH_KEY" \
        -var="key_name=deployer-key" \
        -out=PLAN
      working-directory: ./terraform
    - name: Terraform apply
      id: apply
      run: terraform apply PLAN
      working-directory: ./terraform
    - name: Set output
      id: set-ip
      run: |- 
        echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
      working-directory: ./terraform

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: set ip environment variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Use Vault Secrets
        run: |
          echo "Using Vault Address: ${{ secrets.VAULT_ADDR }}"
          echo "Authenticating with Vault..."
          sudo apt-get update
          sudo apt-get install jq
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install vlt -y
          export HCP_CLIENT_ID=$HCP_CLIENT_ID
          export HCP_CLIENT_SECRET=$HCP_CLIENT_SECRET

          # Use curl or vault CLI to authenticate and retrieve secrets
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          HCP_CLIENT_ID: ${{ secrets.ROLE_ID }}
          HCP_CLIENT_SECRET: ${{ secrets.SECRET_ID }}
      - name: Build, Push docker image
        env:
          REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
          REPOSITORY: formai
          IMAGE_TAG: ${{ github.sha }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
          SECRET: ${{ secrets.SECRET }}
        run: |-
          docker build --build-arg DATABASE_URL=$DATABASE_URL --build-arg SECRET=$SECRET --build-arg REFRESH_SECRET=$REFRESH_SECRET -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./server
      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: formai
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,AWS_DEFAULT_REGION
          script: |-
            sudo apt-get update
            sudo apt-get install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            sudo apt-get install docker.io -y
            sudo docker login -u AWS -p $(aws ecr get-login-password --region us-east-1) 637423485999.dkr.ecr.us-east-1.amazonaws.com/formai
            sudo docker stop myappcontainer || true
            sudo docker rm  myappcontainer || true
            sudo docker pull "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG


