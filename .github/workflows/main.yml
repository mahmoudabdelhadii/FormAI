name: CI/CD with Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_infra:
        description: "Deploy infrastructure (true/false)"
        required: true
        default: "false"

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: us-east-1
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  SECRET: ${{ secrets.SECRET }}
  REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
  CRYPTO_KEY: ${{ secrets.CRYPTO_KEY }}
  EMAIL: ${{ secrets.EMAIL }}
  PASSWORD: ${{ secrets.PASSWORD }}
  EMAIL_SERVICE: ${{ secrets.EMAIL_SERVICE }}
  CLOUDFRONT_DOMAIN: ${{ secrets.CLOUDFRONT_DOMAIN }}
  CLOUDFRONT_KEY_PAIR_ID: ${{ secrets.CLOUDFRONT_KEY_PAIR_ID }}
  CLOUDFRONT_PRIVATE_KEY_BASE64: ${{ secrets.CLOUDFRONT_PRIVATE_KEY }}
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  SUBDOMAIN: ${{ secrets.SUBDOMAIN }}
  ROUTE53_ZONE_ID: ${{ secrets.ROUTE53_ZONE_ID }}

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=$AWS_REGION"
        working-directory: ./terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan \
          -var="region=$AWS_REGION" \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=deployer-key" \
          -var="domain_name=$DOMAIN_NAME" \
          -var="subdomain=$SUBDOMAIN" \
          -var="route53_zone_id=$ROUTE53_ZONE_ID" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set Output
        id: set-ip
        run: echo "::set-output name=instance_public_ip::$(terraform output -raw instance_public_ip)"
        working-directory: ./terraform

  deploy-app:
    needs: deploy-infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set IP Environment Variable
        run: echo "SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}" >> $GITHUB_ENV
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Prepare CloudFront Private Key
        run: echo "$CLOUDFRONT_PRIVATE_KEY_BASE64" | base64 --decode > cloudfront_private_key.pem
      - name: Build and Push Docker Image
        env:
          REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
          REPOSITORY: formai
          IMAGE_TAG: ${{ github.sha }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET: ${{ secrets.SECRET }}
          REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
          CRYPTO_KEY: ${{ secrets.CRYPTO_KEY }}
          EMAIL: ${{ secrets.EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          EMAIL_SERVICE: ${{ secrets.EMAIL_SERVICE }}
          CLOUDFRONT_DOMAIN: ${{ secrets.CLOUDFRONT_DOMAIN }}
          CLOUDFRONT_KEY_PAIR_ID: ${{ secrets.CLOUDFRONT_KEY_PAIR_ID }}
        run: |-
          docker build \
          --build-arg DATABASE_URL=$DATABASE_URL \
          --build-arg SECRET=$SECRET \
          --build-arg REFRESH_SECRET=$REFRESH_SECRET \
          --build-arg CRYPTO_KEY=$CRYPTO_KEY \
          --build-arg EMAIL=$EMAIL \
          --build-arg PASSWORD=$PASSWORD \
          --build-arg EMAIL_SERVICE=$EMAIL_SERVICE \
          --build-arg CLOUDFRONT_DOMAIN=$CLOUDFRONT_DOMAIN \
          --build-arg CLOUDFRONT_KEY_PAIR_ID=$CLOUDFRONT_KEY_PAIR_ID \
          --build-arg CLOUDFRONT_PRIVATE_KEY="$(cat cloudfront_private_key.pem)" \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./server
      - name: Deploy Docker Image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: formai
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: $AWS_REGION
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          script: |-
            sudo apt-get update
            sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            sudo apt-get install -y docker.io
            sudo docker login -u AWS -p $(aws ecr get-login-password --region $AWS_REGION) $REGISTRY
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
