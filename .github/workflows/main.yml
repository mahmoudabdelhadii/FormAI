name: CI/CD with terraform
on:
  push:
    branches:
      - main
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: us-east-1
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  SECRET: ${{ secrets.SECRET }}
  REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
  CRYPTO_KEY: ${{ secrets.CRYPTO_KEY }}
  EMAIL: ${{ secrets.EMAIL }}
  PASSWORD: ${{ secrets.PASSWORD }}
  EMAIL_SERVICE: ${{ secrets.EMAIL_SERVICE }}
  CLOUDFRONT_DOMAIN: ${{ secrets.CLOUDFRONT_DOMAIN }}
  CLOUDFRONT_KEY_PAIR_ID: ${{ secrets.CLOUDFRONT_KEY_PAIR_ID }}
  CLOUDFRONT_PRIVATE_KEY_BASE64: ${{ secrets.CLOUDFRONT_PRIVATE_KEY_BASE64 }}

jobs:
  deploy-infra:
    if: contains(github.event.head_commit.message, 'AWS-DEPLOY:')
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps: 
      - name: checkout
        uses: actions/checkout@v4
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=us-east-1"
        working-directory: ./terraform
      - name: Terraform Validate
        id: validate
        uses: hashicorp/terraform-github-actions/validate@v0.3.7
      - name: Terraform plan
        id: plan
        run: |-
          terraform plan \
          -var="region=us-east-1" \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set output
        id: set-ip
        run: |- 
          echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
        working-directory: ./terraform

  deploy-app:
    if: contains(github.event.head_commit.message, 'AWS-DEPLOY:')
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: set ip environment variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Use Vault Secrets
        run: |
          echo "Using Vault Address: ${{ secrets.VAULT_ADDR }}"
          echo "Authenticating with Vault..."
          sudo apt-get update
          sudo apt-get install jq
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install vlt -y
          export HCP_CLIENT_ID=$HCP_CLIENT_ID
          export HCP_CLIENT_SECRET=$HCP_CLIENT_SECRET
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
          HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
      - name: Prepare CloudFront Private Key
        run: echo "$CLOUDFRONT_PRIVATE_KEY_BASE64" | base64 --decode > cloudfront_private_key.pem
      - name: Build, Push docker image
        env:
          REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
          REPOSITORY: formai
          IMAGE_TAG: ${{ github.sha }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET: ${{ secrets.SECRET }}
          REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
          CRYPTO_KEY: ${{ secrets.CRYPTO_KEY }}
          EMAIL: ${{ secrets.EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          EMAIL_SERVICE: ${{ secrets.EMAIL_SERVICE }}
          CLOUDFRONT_DOMAIN: ${{ secrets.CLOUDFRONT_DOMAIN }}
          CLOUDFRONT_KEY_PAIR_ID: ${{ secrets.CLOUDFRONT_KEY_PAIR_ID }}
        run: |-
          docker build \
          --build-arg DATABASE_URL=$DATABASE_URL \
          --build-arg SECRET=$SECRET \
          --build-arg REFRESH_SECRET=$REFRESH_SECRET \
          --build-arg CRYPTO_KEY=$CRYPTO_KEY \
          --build-arg EMAIL=$EMAIL \
          --build-arg PASSWORD=$PASSWORD \
          --build-arg EMAIL_SERVICE=$EMAIL_SERVICE \
          --build-arg CLOUDFRONT_DOMAIN=$CLOUDFRONT_DOMAIN \
          --build-arg CLOUDFRONT_KEY_PAIR_ID=$CLOUDFRONT_KEY_PAIR_ID \
          --build-arg CLOUDFRONT_PRIVATE_KEY="$(cat cloudfront_private_key.pem)" \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./server
      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: formai
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,AWS_DEFAULT_REGION
          script: |-
            sudo apt-get update
            sudo apt-get install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            sudo apt-get install docker.io -y
            sudo docker login -u AWS -p $(aws ecr get-login-password --region us-east-1) $REGISTRY
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
